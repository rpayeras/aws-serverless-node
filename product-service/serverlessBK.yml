service: "product-service"

frameworkVersion: "3"

plugins:
  - serverless-esbuild
  - serverless-auto-swagger
  - serverless-dotenv-plugin
  - serverless-offline

package:
  individually: true
useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  architecture: arm64
  region: eu-west-1
  stage: dev
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            Fn::GetAtt: [catalogItemsQueue, Arn]
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    NODE_OPTIONS: --enable-source-maps --stack-trace-limit=1000
    SQS_QUEUE_URL: { Ref: catalogItemsQueue }
functions:
  getProductsList:
    memorySize: 512
    handler: src.getProductsList.handler.main
    events:
      - http:
          path: products
          method: get
          cors: true
          summary: "Get a list of products"
          description: "Get a list of products with all their properties"
          swaggerTags:
            - "Products"
          #request:
          # schemas: {
          #   'application/json': schema,
          #
          consumes:
          produces:
            - "application/json"
          responseData:
            200: "Ok response with object"
  getProductsById:
    memorySize: 512
    handler: handler.main
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
          summary: "Get products by id"
          description: "Returns a product by id"
          swaggerTags:
            - "Products"
          request:
            parameters:
              paths:
                productId: true
          consumes:
          produces:
            - "application/json"
          responseData:
            200: "Ok response with object"
            400: "Product not found response"
  postProducts:
    memorySize: 512
    handler: handler.main
    events:
      - http:
          path: "products"
          method: "post"
          cors: true
          summary: "Create a new product"
          description: "Creates a new product passing post parameters"
          swaggerTags:
            - "Products"
          request:
            schemas:
              "application/json": schema,
          consumes:
          produces:
            - "application/json"
          responseData:
            200: "Ok response with product inserted"
  catalogBatchProcess:
    memorySize: 512
    handler: handler.main
    events:
      - http:
          method: get
          path: catalog
          cors: true
          summary: "Manage items of SQS catalogitemsQueue"
          description: "Manage items of SQS catalogitemsQueue"
          swaggerTags:
            - "Products"
          #request:
          # schemas: {
          #   'application/json': schema,
          # },
          consumes: []
          produces: ["application/json"]
          responseData:
            200:
              description: "List of products"
            400:
              description: "Failed response"
            502: "server error"
      - sqs:
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn
          batchSize: 5
resources:
  Resources:
    catalogItemsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: sqs-queue-${opt:stage, self:provider.stage}
custom:
  esbuild:
    bundle: true
    minify: true
    sourcemap: true
    exclude: ["aws-sdk"]
    target: "node16"
    define: { "require.resolve": undefined }
    platform: "node"
    concurrency: 10
  autoswagger:
    title: "Shop Node Js Aws Serverless"
    basePath: "/dev"
    host: "dg6etd0ogl.execute-api.eu-west-1.amazonaws.com"
    schemes: ["https"]
  serverless-offline:
    httpPort: 4000
